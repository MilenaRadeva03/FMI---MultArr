#include <iostream>
const int MAX_SIZE = 100;
void inputArr(int(*arr)[MAX_SIZE], int row, int col)
{
    for (int i = 0;i < row;i++)
    {
        for (int j = 0;j < col;j++)
        {
            std::cin >> arr[i][j];
        }
    }
}
void printArr(int(*arr)[MAX_SIZE], int row, int col)
{
    for (int i = 0;i < row;i++)
    {
        for (int j = 0;j < col;j++)
        {
            std::cout << arr[i][j] << " ";
        }
        std::cout << std::endl;
    }
}
int  sumOfRow(int(*arr)[MAX_SIZE], int row, int col, int num)
{
    int sum = 0;
    for (int j = 0;j < col;j++)
    {
        sum = sum + arr[num][j];
    }
    return sum;
}
int  sumOfCol(int(*arr)[MAX_SIZE], int row, int col, int num)
{
    int sum = 0;
    for (int i = 0;i < row;i++)
    {
        sum = sum + arr[i][num];
    }
    return sum;
}
int sumOfDiagonal1(int(*arr)[MAX_SIZE], int row, int col)
{
    int sum = 0;
    for (int i = 0;i < row;i++)
    {
        sum = sum + arr[i][i];
    }
    return sum;
}
int sumOfDiagonal2(int(*arr)[MAX_SIZE], int row, int col)
{
    int sum = 0;
    for (int i = 0;i < row;i++)
    {
        int j = col - 1;
        sum = sum + arr[i][j];
        j--;
    }
    return sum;
}

bool magicSquare(int(*arr)[MAX_SIZE], int row, int col)
{
    if (row != col)
    {
        throw "This matrix isn`t square!";
    }
    int sumDiagonal1 = sumOfDiagonal1(arr, row, col);
    int sumDiagonal2 = sumOfDiagonal2(arr, row, col);
    int i = 0;
    int j = 0;
    if (sumDiagonal1 != sumDiagonal2)
    {
        return false;
    }
    while (i < row && j < col)
    {
        int sumRow = sumOfRow(arr, row, col, i);
        int sumCol = sumOfCol(arr, row, col, j);

        if (sumRow != sumCol)
        {
            return false;
        }
        else if (sumRow != sumDiagonal1)
        {
            return false;
        }
        i++;
        j++;
    }
    return true;
}

int main()
{
    int row1, col1;
    std::cin >> row1 >> col1;
    int arr1[MAX_SIZE][MAX_SIZE];
    inputArr(arr1, row1, col1);
    try
    {
        std::cout << std::boolalpha << magicSquare(arr1, row1, col1);
    }
    catch (const char* e)
    {
        std::cout << e;
    }
    return 0;
}
